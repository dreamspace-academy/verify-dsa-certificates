{"version":3,"file":"static/js/843.fce0aaf3.chunk.js","mappings":"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","sources":["components/HomeAppBar.js","hooks/useGoogleSheetData.js","components/view-certificate/ShareOnLinkedIn.js","components/ShareQRCode.js","components/view-certificate/CertificateInfoCard.js","pages/CertificatePage.js","utils/fileUrl.js"],"sourcesContent":["import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction HomeAppBar() {\r\n  return (\r\n    <AppBar position=\"static\" sx={{ backgroundColor: 'white', color: 'black' }}>\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Box\r\n            component=\"img\"\r\n            src=\"/logo-dsa.png\"\r\n            alt=\"Logo\"\r\n            sx={{ display: 'flex', height: 50, mr: 1 }}\r\n          />\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default HomeAppBar;\r\n","import { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nconst useGoogleSheetData = (csvUrl) => {\r\n  const [sheetData, setsheetData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    Papa.parse(csvUrl, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => {\r\n        setsheetData(result.data);\r\n        setLoading(false);\r\n      },\r\n    });\r\n  }, [csvUrl]);\r\n\r\n  return { sheetData, loading };\r\n};\r\n\r\nexport default useGoogleSheetData;\r\n","import {\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  InputAdornment,\r\n  Snackbar,\r\n  TextField,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\r\nimport PictureAsPdfRoundedIcon from '@mui/icons-material/PictureAsPdfRounded';\r\n\r\nfunction ShareOnLinkedIn({ certificate, selectedProg }) {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const certificateUrl = `https://verify.dreamspace.academy/certificate/${selectedProg.id}/${certificate.id}`;\r\n\r\n  const linkedInMessage = `🚀 I am excited to share that I have completed the ${selectedProg.programmeName}!\\n\\n✍️ ${selectedProg.programmeDescription}\\n\\n📌 Check out my certificate:\\n${certificateUrl}`;\r\n\r\n  const handleLinkedIn = () => {\r\n    const linkedInShareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(\r\n      certificateUrl\r\n    )}&text=${encodeURIComponent(linkedInMessage)}`;\r\n    window.open(linkedInShareUrl, '_blank');\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(certificateUrl).then(() => {\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box mt={2}>\r\n        <Button\r\n          variant=\"contained\"\r\n          fullWidth\r\n          onClick={handleLinkedIn}\r\n          startIcon={<LinkedInIcon />}\r\n          sx={{ backgroundColor: '#1769aa' }}\r\n        >\r\n          Share on LinkedIn\r\n        </Button>\r\n\r\n        {certificate.certUrl && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => window.open(certificate.certUrl, '_blank')}\r\n            sx={{ mt: 2 }}\r\n            startIcon={<PictureAsPdfRoundedIcon />}\r\n            fullWidth\r\n          >\r\n            Download PDF\r\n          </Button>\r\n        )}\r\n\r\n        <TextField\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          value={certificateUrl}\r\n          margin=\"normal\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <Tooltip title=\"Copy URL\">\r\n                  <IconButton\r\n                    aria-label=\"copy link\"\r\n                    onClick={handleCopy}\r\n                    edge=\"end\"\r\n                  >\r\n                    <ContentCopyIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n      <Snackbar\r\n        open={copied}\r\n        autoHideDuration={2000}\r\n        message=\"URL copied to clipboard\"\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ShareOnLinkedIn;\r\n","import React, { useState } from 'react';\r\nimport { Button, CircularProgress, Card, Stack } from '@mui/material';\r\nimport { QRCodeSVG } from 'qrcode.react';\r\n\r\nexport default function ShareQRCode({ certificateUrl }) {\r\n  const [downloading, setDownloading] = useState(false);\r\n\r\n  const handleDownload = () => {\r\n    setDownloading(true);\r\n    const svg = document.getElementById('certificate-svg');\r\n    const svgData = new XMLSerializer().serializeToString(svg);\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      ctx.drawImage(img, 0, 0);\r\n      const pngFile = canvas.toDataURL('image/png');\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.download = 'certificate.png'; // Add file extension\r\n      downloadLink.href = pngFile;\r\n      downloadLink.click();\r\n      setDownloading(false); // Reset downloading state\r\n    };\r\n\r\n    img.src = `data:image/svg+xml;base64,${btoa(svgData)}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card sx={{ p: 3 }}>\r\n        <Stack\r\n          spacing={2}\r\n          sx={{\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <QRCodeSVG id=\"QRCode\" value={certificateUrl} size={150} />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleDownload}\r\n            disabled={downloading} // Disable button while downloading\r\n          >\r\n            {downloading ? <CircularProgress size={24} /> : 'Download QR Code'}\r\n          </Button>\r\n        </Stack>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  useMediaQuery,\r\n} from '@mui/material';\r\nimport AccountBalanceIcon from '@mui/icons-material/AccountBalance';\r\nimport SyncIcon from '@mui/icons-material/Sync';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport EventIcon from '@mui/icons-material/Event';\r\nimport SchoolIcon from '@mui/icons-material/School';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nconst CertificateCard = ({ certificate, selectedProg }) => {\r\n  const theme = useTheme();\r\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        sx={{\r\n          backgroundColor: '#f9f1ff',\r\n          borderRadius: '12px',\r\n          padding: 2,\r\n          width: '90%',\r\n        }}\r\n      >\r\n        <CardContent\r\n          style={{\r\n            paddingLeft: isSmallScreen && 0,\r\n            paddingRight: isSmallScreen && 0,\r\n            paddingBottom: isSmallScreen && 0,\r\n          }}\r\n        >\r\n          <Typography variant=\"body2\" mb={2}>\r\n            {selectedProg.programmeDescription}\r\n          </Typography>\r\n          {/** Certificate Details */}\r\n          {[\r\n            {\r\n              icon: <PersonIcon />,\r\n              label: 'Recipient',\r\n              value: certificate.name,\r\n            },\r\n            {\r\n              icon: <EventIcon />,\r\n              label: 'Issued Date',\r\n              value: certificate.issuedOn,\r\n            },\r\n            {\r\n              icon: <SchoolIcon />,\r\n              label: 'Program',\r\n              value: selectedProg.programmeName,\r\n            },\r\n            { icon: <SyncIcon />, label: 'Certificate Status', value: 'Valid' },\r\n            {\r\n              icon: <AccountBalanceIcon />,\r\n              label: 'Certificate Issuer',\r\n              value: selectedProg.initiative,\r\n              logo: selectedProg.avatar,\r\n            },\r\n          ].map((item, index) => (\r\n            <Box\r\n              key={index}\r\n              display=\"flex\"\r\n              flexDirection={isSmallScreen ? 'column' : 'row'}\r\n              alignItems={isSmallScreen ? 'flex-start' : 'center'}\r\n              justifyContent=\"space-between\"\r\n              mb={1}\r\n              p={1}\r\n              borderRadius=\"8px\"\r\n              sx={{ backgroundColor: '#38025f', color: 'white' }}\r\n            >\r\n              <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                mb={isSmallScreen ? 1 : 0}\r\n              >\r\n                {React.cloneElement(item.icon, {\r\n                  sx: { color: 'white', marginRight: 1 },\r\n                })}\r\n                <Typography>{item.label}</Typography>\r\n              </Box>\r\n              {['Valid', 'Verified'].includes(item.value) ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    backgroundColor: 'white',\r\n                    color: 'black',\r\n                    '&:hover': { backgroundColor: '#ddd' },\r\n                  }}\r\n                >\r\n                  {item.value}\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  {item.label === 'Certificate Issuer' ? (\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Box\r\n                        component=\"img\"\r\n                        src={item.logo} // Program logo\r\n                        alt={`${item.value} Logo`}\r\n                        sx={{\r\n                          width: 35,\r\n                          height: 35,\r\n                          borderRadius: '50%',\r\n                          mr: 2,\r\n                        }}\r\n                      />\r\n                      <Typography sx={{ fontWeight: 'bold' }}>\r\n                        {item.value}\r\n                      </Typography>\r\n                    </Box>\r\n                  ) : (\r\n                    <Typography sx={{ fontWeight: 'bold' }}>\r\n                      {item.value}\r\n                    </Typography>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Box>\r\n          ))}\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CertificateCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  CircularProgress,\r\n  useTheme,\r\n  useMediaQuery,\r\n} from '@mui/material';\r\nimport { useParams } from 'react-router-dom';\r\nimport useGoogleSheetData from '../hooks/useGoogleSheetData';\r\nimport { csvUrl } from '../utils/fileUrl';\r\nimport Papa from 'papaparse';\r\nimport HomeAppBar from '../components/HomeAppBar';\r\nimport ShareOnLinkedIn from '../components/view-certificate/ShareOnLinkedIn';\r\nimport { Helmet } from 'react-helmet';\r\nimport ShareQRCode from '../components/ShareQRCode';\r\nimport VerifiedBadge from '../assets/verified-badge.png';\r\nimport CertificateInfoCard from '../components/view-certificate/CertificateInfoCard';\r\n\r\nexport default function CertificatePage() {\r\n  const { programId, certificateId } = useParams();\r\n  const [selectedProg, setSelectedProg] = useState(null);\r\n  const [certificate, setCertificate] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const { sheetData: programs, loading: loadingPrograms } =\r\n    useGoogleSheetData(csvUrl);\r\n  const theme = useTheme();\r\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  useEffect(() => {\r\n    if (!loadingPrograms) {\r\n      const selectedProgram = programs.find((prog) => prog.id === programId);\r\n      if (selectedProgram) {\r\n        setSelectedProg(selectedProgram);\r\n      }\r\n    }\r\n  }, [loadingPrograms, programs, programId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedProg) {\r\n      const certificateUrl = csvUrl.replace('gid=0', `gid=${selectedProg.gId}`);\r\n      Papa.parse(certificateUrl, {\r\n        download: true,\r\n        header: true,\r\n        complete: (result) => {\r\n          const certificateData = result.data.find(\r\n            (cert) => cert.id === certificateId\r\n          );\r\n          setCertificate(certificateData);\r\n          setLoading(false);\r\n        },\r\n      });\r\n    }\r\n  }, [selectedProg, certificateId]);\r\n\r\n  const certificateUrl = `https://verify.dreamspace.academy/certificate/${programId}/${certificateId}`;\r\n\r\n  if (loading || loadingPrograms) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"100vh\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!certificate) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"100vh\"\r\n      >\r\n        <Typography variant=\"h6\">Certificate not found</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`Certificate of ${certificate.name}`}</title>\r\n        <meta\r\n          property=\"og:title\"\r\n          content={`Certificate of ${certificate.name}`}\r\n        />\r\n        <meta\r\n          property=\"og:description\"\r\n          content={`I have successfully completed the ${selectedProg.initiative}. Check out my certificate!`}\r\n        />\r\n        <meta\r\n          property=\"og:image\"\r\n          content=\"https://verify.dreamspace.academy/dss-banner.jpg\"\r\n        />\r\n        <meta property=\"og:url\" content={certificateUrl} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n      </Helmet>\r\n      <HomeAppBar />\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8}>\r\n            <Card>\r\n              <CardContent\r\n                style={{\r\n                  paddingLeft: isSmallScreen && 0,\r\n                  paddingRight: isSmallScreen && 0,\r\n                  paddingBottom: isSmallScreen && 0,\r\n                }}\r\n              >\r\n                <>\r\n                  <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                    mb={2}\r\n                  >\r\n                    <Typography variant=\"h5\" marginLeft={2}>\r\n                      {certificate.name}'s Certificate\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box\r\n                    style={{\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      alignContent: 'center',\r\n                    }}\r\n                    mb={3}\r\n                  >\r\n                    <img\r\n                      src={VerifiedBadge}\r\n                      alt=\"Verified by DreamSpace Academy\"\r\n                      style={{ width: isSmallScreen ? '100%' : '30%' }}\r\n                    />\r\n                  </Box>\r\n                  <CertificateInfoCard\r\n                    selectedProg={selectedProg}\r\n                    certificate={certificate}\r\n                  />\r\n                </>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={4}>\r\n            <ShareOnLinkedIn\r\n              certificate={certificate}\r\n              selectedProg={selectedProg}\r\n            />\r\n\r\n            <ShareQRCode certificateUrl={certificateUrl} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","export const csvUrl =\r\n  'https://docs.google.com/spreadsheets/d/e/2PACX-1vQMaE2Gf0PqYPyKfZMtBOGbGbpHD4lhT2LWqKDd_A832AQcB6mdTO44EUeMWG4RNVE8FUAi35FOuCB1/pub?gid=0&single=true&output=csv';\r\n"],"names":["_jsx","AppBar","position","sx","backgroundColor","color","children","Container","maxWidth","Toolbar","disableGutters","Box","component","src","alt","display","height","mr","csvUrl","sheetData","setsheetData","useState","loading","setLoading","useEffect","Papa","download","header","complete","result","data","_ref","certificate","selectedProg","copied","setCopied","certificateUrl","id","linkedInMessage","programmeName","programmeDescription","_jsxs","_Fragment","mt","Button","variant","fullWidth","onClick","handleLinkedIn","linkedInShareUrl","encodeURIComponent","window","open","startIcon","LinkedInIcon","certUrl","PictureAsPdfRoundedIcon","TextField","value","margin","InputProps","endAdornment","InputAdornment","Tooltip","title","IconButton","handleCopy","navigator","clipboard","writeText","then","setTimeout","edge","ContentCopyIcon","Snackbar","autoHideDuration","message","ShareQRCode","downloading","setDownloading","Card","p","Stack","spacing","justifyContent","alignItems","QRCodeSVG","size","handleDownload","svg","document","getElementById","svgData","XMLSerializer","serializeToString","canvas","createElement","ctx","getContext","img","Image","onload","width","drawImage","pngFile","toDataURL","downloadLink","href","click","btoa","disabled","CircularProgress","theme","useTheme","isSmallScreen","useMediaQuery","breakpoints","down","borderRadius","padding","CardContent","style","paddingLeft","paddingRight","paddingBottom","Typography","mb","icon","PersonIcon","label","name","EventIcon","issuedOn","SchoolIcon","SyncIcon","AccountBalanceIcon","initiative","logo","avatar","map","item","index","flexDirection","React","marginRight","includes","fontWeight","CertificatePage","programId","certificateId","useParams","setSelectedProg","setCertificate","programs","loadingPrograms","useGoogleSheetData","selectedProgram","find","prog","replace","gId","certificateData","cert","Helmet","property","content","HomeAppBar","Grid","container","xs","md","marginLeft","alignContent","VerifiedBadge","CertificateInfoCard","ShareOnLinkedIn"],"sourceRoot":""}